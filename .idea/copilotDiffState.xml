<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/educonnect/event/service/EventService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/educonnect/event/service/EventService.java" />
              <option name="originalContent" value="package com.educonnect.event.service;&#10;&#10;import com.educonnect.event.dto.response.EventResponseDto;&#10;import com.educonnect.event.dto.response.PagedResponse;&#10;import com.educonnect.event.dto.response.ViewRegistrationsDTO;&#10;import com.educonnect.event.enums.EventRoleType;&#10;import com.educonnect.event.model.EventRole;&#10;import com.educonnect.event.model.Events;&#10;import com.educonnect.event.repo.EventsRepo;&#10;import com.educonnect.event.repo.RegistrationRepo;&#10;import com.educonnect.event.repo.EventRoleRepo;&#10;import com.educonnect.event.utility.EventMapper;&#10;import com.educonnect.exceptionhandling.exception.EventNotFoundException;&#10;import com.educonnect.exceptionhandling.exception.FileUploadException;&#10;import com.educonnect.user.entity.Users;&#10;import com.educonnect.user.repository.UserRepository;&#10;import com.educonnect.utils.aws.s3.S3FileUploadUtil;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.cache.annotation.Cacheable;&#10;import org.springframework.context.ApplicationEventPublisher;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageRequest;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.util.StringUtils;&#10;import org.springframework.web.multipart.MultipartFile;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.Date;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.UUID;&#10;import org.springframework.security.access.AccessDeniedException;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;@Service&#10;@Slf4j&#10;@RequiredArgsConstructor&#10;public class EventService {&#10;&#10;    private final EventsRepo erepo;&#10;&#10;    private final S3FileUploadUtil s3FileUploadUtil;&#10;&#10;    private final RegistrationRepo repo;&#10;&#10;    private final UserRepository uRepo;&#10;&#10;    private final ApplicationEventPublisher applicationEventPublisher;&#10;&#10;    private final EventRoleRepo eventRoleRepo;&#10;&#10;&#10;&#10;//    @Cacheable(value = &quot;events&quot;, key = &quot;#pageable.pageNumber + '_' + #pageable.pageSize + '_' + #pageable.sort&quot;)&#10;    public PagedResponse&lt;EventResponseDto&gt; getAllEvents(Pageable pageable) {&#10;        log.info(&quot;Fetching all events with pagination: {}&quot;, pageable);&#10;        Page&lt;Events&gt; eventsPage = erepo.findAll(pageable);&#10;        List&lt;EventResponseDto&gt; eventDtos = eventsPage.getContent().stream()&#10;                .map(EventMapper::toEventResponseDto)&#10;                .toList();&#10;        return PagedResponse.&lt;EventResponseDto&gt;builder()&#10;                .content(eventDtos)&#10;                .page(eventsPage.getNumber())&#10;                .size(eventsPage.getSize())&#10;                .totalElements(eventsPage.getTotalElements())&#10;                .totalPages(eventsPage.getTotalPages())&#10;                .first(eventsPage.isFirst())&#10;                .last(eventsPage.isLast())&#10;                .build();&#10;    }&#10;&#10;&#10;    public Optional&lt;Events&gt; findEventById(Long eventId){&#10;        return erepo.findById(eventId);&#10;    }&#10;&#10;&#10;&#10;    public Events addEvent(Events event , UUID userId , MultipartFile file) {&#10;        if (event == null) {&#10;            throw new IllegalArgumentException(&quot;Event cannot be null&quot;);&#10;        }&#10;&#10;        Users creator = uRepo.findById(userId).orElseThrow(() -&gt; new RuntimeException(&quot;User Not Found&quot;));&#10;&#10;        event.setCreatedBy(creator);&#10;        if(file != null) {&#10;&#10;            if(file.getSize() &gt; 1024 * 1024 * 5){&#10;                throw new FileUploadException(&quot;File size should be less than 5MB.&quot;);&#10;            }&#10;&#10;            String bannerUrl;&#10;&#10;            try {&#10;                bannerUrl = s3FileUploadUtil.uploadImage(file);&#10;            } catch (Exception ex) {&#10;                throw new FileUploadException(&quot;Something happened while uploading file.&quot;);&#10;            }&#10;            event.setBannerUrl(bannerUrl);&#10;&#10;        }&#10;&#10;&#10;        EventRole creatorRole = EventRole.builder()&#10;                .event(event)&#10;                .user(creator)&#10;                .role(EventRoleType.CREATOR)&#10;                .build();&#10;&#10;&#10;        if(event.getEventRoles() != null){&#10;            event.getEventRoles().add(creatorRole);&#10;        } else {&#10;            event.setEventRoles(List.of(creatorRole));&#10;        }&#10;&#10;        validateEventData(event);&#10;&#10;        applicationEventPublisher.publishEvent(&#10;                new EventCreatedDomainEvent(event.getId(), userId)&#10;        );&#10;&#10;        return erepo.save(event);&#10;    }&#10;&#10;    private void validateEventData(Events event) {&#10;        if(event.getTitle() == null || event.getTitle().trim().isEmpty()){&#10;            throw new IllegalArgumentException(&quot;Event title cannot be empty&quot;);&#10;        }&#10;&#10;        if(event.getStartDate() == null || event.getEndDate() == null){&#10;            throw new IllegalArgumentException(&quot;Event start date and end date cannot be null&quot;);&#10;        }&#10;        if(event.getStartDate().isBefore(LocalDateTime.now()) || event.getEndDate().isBefore(LocalDateTime.now())){&#10;            throw new IllegalArgumentException(&quot;Event start date and end date cannot be in the past&quot;);&#10;        }&#10;&#10;        if(event.getMaxParticipants() &lt;= 0){&#10;            throw new IllegalArgumentException(&quot;Maximum participants must be greater than 0&quot;);&#10;        }&#10;    }&#10;&#10;    public Events updateEvent(Events newEvent , Long id , UUID userId , MultipartFile file) {&#10;        Events crrEvent = erepo.findById(id).orElseThrow(() -&gt;&#10;                new IllegalArgumentException(&quot;Event not found with id: &quot; + id)&#10;        );&#10;&#10;        if(!crrEvent.getCreatedBy().getId().equals(userId)){&#10;            throw new IllegalArgumentException(&quot;You can only update events which created by you.&quot;);&#10;        }&#10;&#10;        if(file != null) {&#10;&#10;            if(file.getSize() &gt; 1024 * 1024 * 5){&#10;                throw new FileUploadException(&quot;File size should be less than 5MB.&quot;);&#10;            }&#10;&#10;            String bannerUrl;&#10;&#10;            try {&#10;                bannerUrl = s3FileUploadUtil.uploadImage(file);&#10;            } catch (Exception ex) {&#10;                throw new FileUploadException(&quot;Something happened while uploading file.&quot;);&#10;            }&#10;            crrEvent.setBannerUrl(bannerUrl);&#10;&#10;        }&#10;&#10;&#10;        crrEvent.setTitle(newEvent.getTitle());&#10;        crrEvent.setDescription(newEvent.getDescription());&#10;        crrEvent.setUniversity(newEvent.getUniversity());&#10;        crrEvent.setStartDate(newEvent.getStartDate());&#10;        crrEvent.setEndDate(newEvent.getEndDate());&#10;        crrEvent.setLocation(newEvent.getLocation());&#10;        crrEvent.setMaxParticipants(newEvent.getMaxParticipants());&#10;        crrEvent.setBannerUrl(newEvent.getBannerUrl());&#10;        crrEvent.setAttachmentUrl(newEvent.getAttachmentUrl());&#10;        validateEventData(crrEvent);&#10;&#10;        return erepo.save(crrEvent);&#10;    }&#10;&#10;    public void deleteEvent(Long id , UUID userId) {&#10;        Events event = erepo.findById(id).orElseThrow(() -&gt;&#10;                new IllegalArgumentException(&quot;Event not found with id: &quot; + id)&#10;        );&#10;&#10;        if(!event.getCreatedBy().getId().equals(userId)){&#10;            throw new IllegalArgumentException(&quot;You can only update events which created by you.&quot;);&#10;        }&#10;&#10;        erepo.deleteById(id);&#10;    }&#10;&#10;    @Cacheable(value = &quot;eventSearch&quot;, key = &quot;#keyWord + '_' + #pageable.pageNumber + '_' + #pageable.pageSize &quot;)&#10;    public PagedResponse&lt;EventResponseDto&gt; searchEvents(String keyWord , Pageable pageable) {&#10;        log.info(&quot;Searching events with keyword: {}&quot;, keyWord);&#10;&#10;        if (!StringUtils.hasText(keyWord)) {&#10;            return getAllEvents(pageable);&#10;        }&#10;&#10;//        if(keyWord == null || keyWord.trim().isEmpty()){&#10;//            return getAllEvents();&#10;//        }&#10;&#10;        Page&lt;Events&gt; eventsPage = erepo.searchEvents(keyWord, pageable);&#10;        List&lt;EventResponseDto&gt; eventdtoli = eventsPage.getContent().stream().map(EventMapper::toEventResponseDto).toList();&#10;&#10;        return PagedResponse.&lt;EventResponseDto&gt;builder()&#10;                .content(eventdtoli)&#10;                .page(pageable.getPageNumber())&#10;                .size(pageable.getPageSize())&#10;                .totalElements(eventsPage.getTotalElements())&#10;                .totalPages(eventsPage.getTotalPages())&#10;                .first(eventsPage.isFirst())&#10;                .last(eventsPage.isLast())&#10;                .empty(eventsPage.isEmpty())&#10;                .build();&#10;    }&#10;&#10;    public PagedResponse&lt;EventResponseDto&gt; getUpcomingEvents(Pageable pageable){&#10;        Page&lt;Events&gt; eventsPage = erepo.findByStartDateAfterOrderByStartDateAsc(LocalDateTime.now(), pageable);&#10;        List&lt;EventResponseDto&gt; eventDtos = eventsPage.getContent().stream()&#10;                .map(EventMapper::toEventResponseDto)&#10;                .toList();&#10;        return PagedResponse.&lt;EventResponseDto&gt;builder()&#10;                .content(eventDtos)&#10;                .page(eventsPage.getNumber())&#10;                .size(eventsPage.getSize())&#10;                .totalElements(eventsPage.getTotalElements())&#10;                .totalPages(eventsPage.getTotalPages())&#10;                .first(eventsPage.isFirst())&#10;                .last(eventsPage.isLast())&#10;                .build();&#10;    }&#10;&#10;//    public List&lt;Events&gt; findEventByCreator(String username){&#10;//        List&lt;Users&gt; user = uRepo.findByUsername(username);&#10;////                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with username: &quot; + username));;&#10;//&#10;//&#10;//        return erepo.findByCreatedBy(user);&#10;//    }&#10;&#10;    public List&lt;Events&gt; getPastEvents(){&#10;        return erepo.findByStartDateBeforeOrderByStartDateDesc(LocalDateTime.now());&#10;    }&#10;&#10;    public PagedResponse&lt;EventResponseDto&gt; getPastEvents(Pageable pageable){&#10;        Page&lt;Events&gt; eventsPage = erepo.findByStartDateBeforeOrderByStartDateDesc(LocalDateTime.now(), pageable);&#10;        List&lt;EventResponseDto&gt; eventDtos = eventsPage.getContent().stream()&#10;                .map(EventMapper::toEventResponseDto)&#10;                .toList();&#10;        return PagedResponse.&lt;EventResponseDto&gt;builder()&#10;                .content(eventDtos)&#10;                .page(eventsPage.getNumber())&#10;                .size(eventsPage.getSize())&#10;                .totalElements(eventsPage.getTotalElements())&#10;                .totalPages(eventsPage.getTotalPages())&#10;                .first(eventsPage.isFirst())&#10;                .last(eventsPage.isLast())&#10;                .build();&#10;    }&#10;&#10;    public List&lt;Events&gt; getEventsByDateRange(LocalDateTime startDate, LocalDateTime endDate){&#10;            return erepo.findByStartDateBetweenOrderByStartDateAsc(startDate, endDate);&#10;    }&#10;&#10;    public PagedResponse&lt;EventResponseDto&gt; getEventsByDateRange(LocalDateTime startDate, LocalDateTime endDate, Pageable pageable){&#10;        Page&lt;Events&gt; eventsPage = erepo.findByStartDateBetweenOrderByStartDateAsc(startDate, endDate, pageable);&#10;        List&lt;EventResponseDto&gt; eventDtos = eventsPage.getContent().stream()&#10;                .map(EventMapper::toEventResponseDto)&#10;                .toList();&#10;        return PagedResponse.&lt;EventResponseDto&gt;builder()&#10;                .content(eventDtos)&#10;                .page(eventsPage.getNumber())&#10;                .size(eventsPage.getSize())&#10;                .totalElements(eventsPage.getTotalElements())&#10;                .totalPages(eventsPage.getTotalPages())&#10;                .first(eventsPage.isFirst())&#10;                .last(eventsPage.isLast())&#10;                .build();&#10;    }&#10;&#10;    public long getEventRegistrationCount(Long eventId){&#10;        Events event = erepo.findById(eventId).orElseThrow(() -&gt;&#10;                new IllegalArgumentException(&quot;Event not found with id: &quot; + eventId)&#10;        );&#10;&#10;        return event.getCurrentParticipantCount();&#10;    }&#10;&#10;    public Long getAvailableSpots(Long eventId){&#10;        Events event = erepo.findById(eventId).orElseThrow(() -&gt;&#10;                new IllegalArgumentException(&quot;Event not found with id: &quot; + eventId)&#10;        );&#10;&#10;        return event.getMaxParticipants() - repo.countByEventIdAndFormSubmittedTrue(eventId);&#10;    }&#10;&#10;    public boolean isEventFull(Long eventId){&#10;        Events event = erepo.findById(eventId).orElseThrow(() -&gt;&#10;                new IllegalArgumentException(&quot;Event not found with id: &quot; + eventId)&#10;        );&#10;&#10;        return event.isFull();&#10;    }&#10;&#10;    public boolean isEventActive(Long eventId){&#10;        Events event = erepo.findById(eventId).orElseThrow(() -&gt;&#10;                new IllegalArgumentException(&quot;Event not found with id: &quot; + eventId)&#10;        );&#10;        return event.getStartDate().isAfter(LocalDateTime.now());&#10;    }&#10;&#10;&#10;    public PagedResponse&lt;EventResponseDto&gt; getPopularEvents(Pageable pageable){&#10;        Page&lt;Events&gt; eventsPage = erepo.findTopEventsByRegistrationCountPaged(pageable);&#10;        List&lt;EventResponseDto&gt; eventDtos = eventsPage.getContent().stream()&#10;                .map(EventMapper::toEventResponseDto)&#10;                .toList();&#10;        return PagedResponse.&lt;EventResponseDto&gt;builder()&#10;                .content(eventDtos)&#10;                .page(eventsPage.getNumber())&#10;                .size(eventsPage.getSize())&#10;                .totalElements(eventsPage.getTotalElements())&#10;                .totalPages(eventsPage.getTotalPages())&#10;                .first(eventsPage.isFirst())&#10;                .last(eventsPage.isLast())&#10;                .build();&#10;    }&#10;&#10;    public List&lt;Events&gt; getMyCreatedEvents(UUID userId){&#10;        Users user = uRepo.findById(userId)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#10;        return erepo.findByCreatedByOrderByCreatedAtDesc(user);&#10;    }&#10;&#10;    public PagedResponse&lt;EventResponseDto&gt; getMyCreatedEvents(UUID userId, Pageable pageable){&#10;        Users user = uRepo.findById(userId)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#10;        Page&lt;Events&gt; eventsPage = erepo.findByCreatedByOrderByCreatedAtDesc(user, pageable);&#10;        List&lt;EventResponseDto&gt; eventDtos = eventsPage.getContent().stream()&#10;                .map(EventMapper::toEventResponseDto)&#10;                .toList();&#10;        return PagedResponse.&lt;EventResponseDto&gt;builder()&#10;                .content(eventDtos)&#10;                .page(eventsPage.getNumber())&#10;                .size(eventsPage.getSize())&#10;                .totalElements(eventsPage.getTotalElements())&#10;                .totalPages(eventsPage.getTotalPages())&#10;                .first(eventsPage.isFirst())&#10;                .last(eventsPage.isLast())&#10;                .build();&#10;    }&#10;&#10;    public long getTotalEventsCount(){&#10;        return erepo.count();&#10;    }&#10;&#10;    public long getTotalActiveEventsCount(){&#10;        return erepo.countByStartDateAfter(LocalDateTime.now());&#10;    }&#10;&#10;    public long getEventsByCreatorCount(UUID creatorId){&#10;        Users user = uRepo.findById(creatorId)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + creatorId));&#10;        return erepo.countByCreatedBy(user);&#10;    }&#10;&#10;    public boolean isUserEventCreator(Long eventId, UUID userId){&#10;        Events event = erepo.findById(eventId).orElseThrow(() -&gt;&#10;                new IllegalArgumentException(&quot;Event not found with id: &quot; + eventId)&#10;        );&#10;        return event.getCreatedBy().getId().equals(userId);&#10;    }&#10;&#10;    public UUID getEventCreator(Long eventId){&#10;        Events event = erepo.findById(eventId).orElseThrow(() -&gt;&#10;                new IllegalArgumentException(&quot;Event not found with id: &quot; + eventId)&#10;        );&#10;        return event.getCreatedBy().getId();&#10;    }&#10;&#10;    @Transactional(readOnly = true)&#10;    public ViewRegistrationsDTO viewEventRegistrations(Long eventId, UUID userId) {&#10;        Events event = erepo.findById(eventId)&#10;                .orElseThrow(() -&gt; new EventNotFoundException(&quot;Event not found with id: &quot; + eventId));&#10;        return event.getCreatedBy().getId();&#10;    }&#10;&#10;    @Transactional(readOnly = true)&#10;    public ViewRegistrationsDTO viewEventRegistrations(Long id, UUID userId) {&#10;        Events event = erepo.findById(id).orElseThrow(() -&gt;&#10;                new IllegalArgumentException(&quot;Event not found with id: &quot; + id)&#10;        );&#10;&#10;        boolean isCreator = event.getCreatedBy().getId().equals(userId);&#10;        var eventRole = eventRoleRepo.findByUserIdAndEventId(userId, id);&#10;        boolean hasPrivilegedRole = false;&#10;        if(eventRole != null){&#10;            switch (eventRole.getRole()){&#10;                case CREATOR, ORGANIZER, MODERATOR, ADMIN -&gt; hasPrivilegedRole = true;&#10;                default -&gt; hasPrivilegedRole = false;&#10;            }&#10;        }&#10;&#10;        if(!(isCreator || hasPrivilegedRole)){&#10;            throw new AccessDeniedException(&quot;You are not allowed to view registrations for this event.&quot;);&#10;        }&#10;&#10;        Long registrationCount = repo.countByEventIdAndFormSubmittedTrue(id);&#10;&#10;        ViewRegistrationsDTO response = new ViewRegistrationsDTO();&#10;        response.setEventTitle(event.getTitle());&#10;        response.setRegistrationCount(registrationCount);&#10;&#10;        List&lt;Users&gt; registeredUsers = repo.findRegisteredUsersByEventIdAndFormSubmittedTrue(id);&#10;&#10;&#10;        List&lt;ViewRegistrationsDTO.RegistrationDetail&gt; registrationDetails = registeredUsers.stream()&#10;                .map(user -&gt; new ViewRegistrationsDTO.RegistrationDetail(&#10;                        user.getId(),&#10;                        user.getFullName(),&#10;                        user.getEmail(),&#10;                        user.getAvatar()&#10;                ))&#10;                .toList();&#10;&#10;        response.setRegistrations(registrationDetails);&#10;&#10;    public List&lt;Events&gt; getPopularEvents(int limit){&#10;        Pageable pageable = PageRequest.of(0, limit);&#10;        return erepo.findTopEventsByRegistrationCount(pageable);&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.educonnect.event.service;&#10;&#10;import com.educonnect.event.dto.response.EventResponseDto;&#10;import com.educonnect.event.dto.response.PagedResponse;&#10;import com.educonnect.event.dto.response.ViewRegistrationsDTO;&#10;import com.educonnect.event.enums.EventRoleType;&#10;import com.educonnect.event.model.EventRole;&#10;import com.educonnect.event.model.Events;&#10;import com.educonnect.event.repo.EventsRepo;&#10;import com.educonnect.event.repo.RegistrationRepo;&#10;import com.educonnect.event.repo.EventRoleRepo;&#10;import com.educonnect.event.utility.EventMapper;&#10;import com.educonnect.exceptionhandling.exception.EventNotFoundException;&#10;import com.educonnect.exceptionhandling.exception.FileUploadException;&#10;import com.educonnect.user.entity.Users;&#10;import com.educonnect.user.repository.UserRepository;&#10;import com.educonnect.utils.aws.s3.S3FileUploadUtil;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.cache.annotation.Cacheable;&#10;import org.springframework.context.ApplicationEventPublisher;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageRequest;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.util.StringUtils;&#10;import org.springframework.web.multipart.MultipartFile;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.Date;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.UUID;&#10;import org.springframework.security.access.AccessDeniedException;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;@Service&#10;@Slf4j&#10;@RequiredArgsConstructor&#10;public class EventService {&#10;&#10;    private final EventsRepo erepo;&#10;&#10;    private final S3FileUploadUtil s3FileUploadUtil;&#10;&#10;    private final RegistrationRepo repo;&#10;&#10;    private final UserRepository uRepo;&#10;&#10;    private final ApplicationEventPublisher applicationEventPublisher;&#10;&#10;    private final EventRoleRepo eventRoleRepo;&#10;&#10;&#10;&#10;//    @Cacheable(value = &quot;events&quot;, key = &quot;#pageable.pageNumber + '_' + #pageable.pageSize + '_' + #pageable.sort&quot;)&#10;    public PagedResponse&lt;EventResponseDto&gt; getAllEvents(Pageable pageable) {&#10;        log.info(&quot;Fetching all events with pagination: {}&quot;, pageable);&#10;        Page&lt;Events&gt; eventsPage = erepo.findAll(pageable);&#10;        List&lt;EventResponseDto&gt; eventDtos = eventsPage.getContent().stream()&#10;                .map(EventMapper::toEventResponseDto)&#10;                .toList();&#10;        return PagedResponse.&lt;EventResponseDto&gt;builder()&#10;                .content(eventDtos)&#10;                .page(eventsPage.getNumber())&#10;                .size(eventsPage.getSize())&#10;                .totalElements(eventsPage.getTotalElements())&#10;                .totalPages(eventsPage.getTotalPages())&#10;                .first(eventsPage.isFirst())&#10;                .last(eventsPage.isLast())&#10;                .build();&#10;    }&#10;&#10;&#10;    public Optional&lt;Events&gt; findEventById(Long eventId){&#10;        return erepo.findById(eventId);&#10;    }&#10;&#10;&#10;&#10;    public Events addEvent(Events event , UUID userId , MultipartFile file) {&#10;        if (event == null) {&#10;            throw new IllegalArgumentException(&quot;Event cannot be null&quot;);&#10;        }&#10;&#10;        Users creator = uRepo.findById(userId).orElseThrow(() -&gt; new RuntimeException(&quot;User Not Found&quot;));&#10;&#10;        event.setCreatedBy(creator);&#10;        if(file != null) {&#10;&#10;            if(file.getSize() &gt; 1024 * 1024 * 5){&#10;                throw new FileUploadException(&quot;File size should be less than 5MB.&quot;);&#10;            }&#10;&#10;            String bannerUrl;&#10;&#10;            try {&#10;                bannerUrl = s3FileUploadUtil.uploadImage(file);&#10;            } catch (Exception ex) {&#10;                throw new FileUploadException(&quot;Something happened while uploading file.&quot;);&#10;            }&#10;            event.setBannerUrl(bannerUrl);&#10;&#10;        }&#10;&#10;&#10;        EventRole creatorRole = EventRole.builder()&#10;                .event(event)&#10;                .user(creator)&#10;                .role(EventRoleType.CREATOR)&#10;                .build();&#10;&#10;&#10;        if(event.getEventRoles() != null){&#10;            event.getEventRoles().add(creatorRole);&#10;        } else {&#10;            event.setEventRoles(List.of(creatorRole));&#10;        }&#10;&#10;        validateEventData(event);&#10;&#10;        applicationEventPublisher.publishEvent(&#10;                new EventCreatedDomainEvent(event.getId(), userId)&#10;        );&#10;&#10;        return erepo.save(event);&#10;    }&#10;&#10;    private void validateEventData(Events event) {&#10;        if(event.getTitle() == null || event.getTitle().trim().isEmpty()){&#10;            throw new IllegalArgumentException(&quot;Event title cannot be empty&quot;);&#10;        }&#10;&#10;        if(event.getStartDate() == null || event.getEndDate() == null){&#10;            throw new IllegalArgumentException(&quot;Event start date and end date cannot be null&quot;);&#10;        }&#10;        if(event.getStartDate().isBefore(LocalDateTime.now()) || event.getEndDate().isBefore(LocalDateTime.now())){&#10;            throw new IllegalArgumentException(&quot;Event start date and end date cannot be in the past&quot;);&#10;        }&#10;&#10;        if(event.getMaxParticipants() &lt;= 0){&#10;            throw new IllegalArgumentException(&quot;Maximum participants must be greater than 0&quot;);&#10;        }&#10;    }&#10;&#10;    public Events updateEvent(Events newEvent , Long id , UUID userId , MultipartFile file) {&#10;        Events crrEvent = erepo.findById(id).orElseThrow(() -&gt;&#10;                new IllegalArgumentException(&quot;Event not found with id: &quot; + id)&#10;        );&#10;&#10;        if(!crrEvent.getCreatedBy().getId().equals(userId)){&#10;            throw new IllegalArgumentException(&quot;You can only update events which created by you.&quot;);&#10;        }&#10;&#10;        if(file != null) {&#10;&#10;            if(file.getSize() &gt; 1024 * 1024 * 5){&#10;                throw new FileUploadException(&quot;File size should be less than 5MB.&quot;);&#10;            }&#10;&#10;            String bannerUrl;&#10;&#10;            try {&#10;                bannerUrl = s3FileUploadUtil.uploadImage(file);&#10;            } catch (Exception ex) {&#10;                throw new FileUploadException(&quot;Something happened while uploading file.&quot;);&#10;            }&#10;            crrEvent.setBannerUrl(bannerUrl);&#10;&#10;        }&#10;&#10;&#10;        crrEvent.setTitle(newEvent.getTitle());&#10;        crrEvent.setDescription(newEvent.getDescription());&#10;        crrEvent.setUniversity(newEvent.getUniversity());&#10;        crrEvent.setStartDate(newEvent.getStartDate());&#10;        crrEvent.setEndDate(newEvent.getEndDate());&#10;        crrEvent.setLocation(newEvent.getLocation());&#10;        crrEvent.setMaxParticipants(newEvent.getMaxParticipants());&#10;        crrEvent.setBannerUrl(newEvent.getBannerUrl());&#10;        crrEvent.setAttachmentUrl(newEvent.getAttachmentUrl());&#10;        validateEventData(crrEvent);&#10;&#10;        return erepo.save(crrEvent);&#10;    }&#10;&#10;    public void deleteEvent(Long id , UUID userId) {&#10;        Events event = erepo.findById(id).orElseThrow(() -&gt;&#10;                new IllegalArgumentException(&quot;Event not found with id: &quot; + id)&#10;        );&#10;&#10;        if(!event.getCreatedBy().getId().equals(userId)){&#10;            throw new IllegalArgumentException(&quot;You can only update events which created by you.&quot;);&#10;        }&#10;&#10;        erepo.deleteById(id);&#10;    }&#10;&#10;    @Cacheable(value = &quot;eventSearch&quot;, key = &quot;#keyWord + '_' + #pageable.pageNumber + '_' + #pageable.pageSize &quot;)&#10;    public PagedResponse&lt;EventResponseDto&gt; searchEvents(String keyWord , Pageable pageable) {&#10;        log.info(&quot;Searching events with keyword: {}&quot;, keyWord);&#10;&#10;        if (!StringUtils.hasText(keyWord)) {&#10;            return getAllEvents(pageable);&#10;        }&#10;&#10;//        if(keyWord == null || keyWord.trim().isEmpty()){&#10;//            return getAllEvents();&#10;//        }&#10;&#10;        Page&lt;Events&gt; eventsPage = erepo.searchEvents(keyWord, pageable);&#10;        List&lt;EventResponseDto&gt; eventdtoli = eventsPage.getContent().stream().map(EventMapper::toEventResponseDto).toList();&#10;&#10;        return PagedResponse.&lt;EventResponseDto&gt;builder()&#10;                .content(eventdtoli)&#10;                .page(pageable.getPageNumber())&#10;                .size(pageable.getPageSize())&#10;                .totalElements(eventsPage.getTotalElements())&#10;                .totalPages(eventsPage.getTotalPages())&#10;                .first(eventsPage.isFirst())&#10;                .last(eventsPage.isLast())&#10;                .empty(eventsPage.isEmpty())&#10;                .build();&#10;    }&#10;&#10;    public PagedResponse&lt;EventResponseDto&gt; getUpcomingEvents(Pageable pageable){&#10;        Page&lt;Events&gt; eventsPage = erepo.findByStartDateAfterOrderByStartDateAsc(LocalDateTime.now(), pageable);&#10;        List&lt;EventResponseDto&gt; eventDtos = eventsPage.getContent().stream()&#10;                .map(EventMapper::toEventResponseDto)&#10;                .toList();&#10;        return PagedResponse.&lt;EventResponseDto&gt;builder()&#10;                .content(eventDtos)&#10;                .page(eventsPage.getNumber())&#10;                .size(eventsPage.getSize())&#10;                .totalElements(eventsPage.getTotalElements())&#10;                .totalPages(eventsPage.getTotalPages())&#10;                .first(eventsPage.isFirst())&#10;                .last(eventsPage.isLast())&#10;                .build();&#10;    }&#10;&#10;//    public List&lt;Events&gt; findEventByCreator(String username){&#10;//        List&lt;Users&gt; user = uRepo.findByUsername(username);&#10;////                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with username: &quot; + username));;&#10;//&#10;//&#10;//        return erepo.findByCreatedBy(user);&#10;//    }&#10;&#10;    public List&lt;Events&gt; getPastEvents(){&#10;        return erepo.findByStartDateBeforeOrderByStartDateDesc(LocalDateTime.now());&#10;    }&#10;&#10;    public PagedResponse&lt;EventResponseDto&gt; getPastEvents(Pageable pageable){&#10;        Page&lt;Events&gt; eventsPage = erepo.findByStartDateBeforeOrderByStartDateDesc(LocalDateTime.now(), pageable);&#10;        List&lt;EventResponseDto&gt; eventDtos = eventsPage.getContent().stream()&#10;                .map(EventMapper::toEventResponseDto)&#10;                .toList();&#10;        return PagedResponse.&lt;EventResponseDto&gt;builder()&#10;                .content(eventDtos)&#10;                .page(eventsPage.getNumber())&#10;                .size(eventsPage.getSize())&#10;                .totalElements(eventsPage.getTotalElements())&#10;                .totalPages(eventsPage.getTotalPages())&#10;                .first(eventsPage.isFirst())&#10;                .last(eventsPage.isLast())&#10;                .build();&#10;    }&#10;&#10;    public List&lt;Events&gt; getEventsByDateRange(LocalDateTime startDate, LocalDateTime endDate){&#10;            return erepo.findByStartDateBetweenOrderByStartDateAsc(startDate, endDate);&#10;    }&#10;&#10;    public PagedResponse&lt;EventResponseDto&gt; getEventsByDateRange(LocalDateTime startDate, LocalDateTime endDate, Pageable pageable){&#10;        Page&lt;Events&gt; eventsPage = erepo.findByStartDateBetweenOrderByStartDateAsc(startDate, endDate, pageable);&#10;        List&lt;EventResponseDto&gt; eventDtos = eventsPage.getContent().stream()&#10;                .map(EventMapper::toEventResponseDto)&#10;                .toList();&#10;        return PagedResponse.&lt;EventResponseDto&gt;builder()&#10;                .content(eventDtos)&#10;                .page(eventsPage.getNumber())&#10;                .size(eventsPage.getSize())&#10;                .totalElements(eventsPage.getTotalElements())&#10;                .totalPages(eventsPage.getTotalPages())&#10;                .first(eventsPage.isFirst())&#10;                .last(eventsPage.isLast())&#10;                .build();&#10;    }&#10;&#10;    public long getEventRegistrationCount(Long eventId){&#10;        Events event = erepo.findById(eventId).orElseThrow(() -&gt;&#10;                new IllegalArgumentException(&quot;Event not found with id: &quot; + eventId)&#10;        );&#10;&#10;        return event.getCurrentParticipantCount();&#10;    }&#10;&#10;    public Long getAvailableSpots(Long eventId){&#10;        Events event = erepo.findById(eventId).orElseThrow(() -&gt;&#10;                new IllegalArgumentException(&quot;Event not found with id: &quot; + eventId)&#10;        );&#10;&#10;        return event.getMaxParticipants() - repo.countByEventIdAndFormSubmittedTrue(eventId);&#10;    }&#10;&#10;    public boolean isEventFull(Long eventId){&#10;        Events event = erepo.findById(eventId).orElseThrow(() -&gt;&#10;                new IllegalArgumentException(&quot;Event not found with id: &quot; + eventId)&#10;        );&#10;&#10;        return event.isFull();&#10;    }&#10;&#10;    public boolean isEventActive(Long eventId){&#10;        Events event = erepo.findById(eventId).orElseThrow(() -&gt;&#10;                new IllegalArgumentException(&quot;Event not found with id: &quot; + eventId)&#10;        );&#10;        return event.getStartDate().isAfter(LocalDateTime.now());&#10;    }&#10;&#10;&#10;    public PagedResponse&lt;EventResponseDto&gt; getPopularEvents(Pageable pageable){&#10;        Page&lt;Events&gt; eventsPage = erepo.findTopEventsByRegistrationCountPaged(pageable);&#10;        List&lt;EventResponseDto&gt; eventDtos = eventsPage.getContent().stream()&#10;                .map(EventMapper::toEventResponseDto)&#10;                .toList();&#10;        return PagedResponse.&lt;EventResponseDto&gt;builder()&#10;                .content(eventDtos)&#10;                .page(eventsPage.getNumber())&#10;                .size(eventsPage.getSize())&#10;                .totalElements(eventsPage.getTotalElements())&#10;                .totalPages(eventsPage.getTotalPages())&#10;                .first(eventsPage.isFirst())&#10;                .last(eventsPage.isLast())&#10;                .build();&#10;    }&#10;&#10;    public List&lt;Events&gt; getMyCreatedEvents(UUID userId){&#10;        Users user = uRepo.findById(userId)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#10;        return erepo.findByCreatedByOrderByCreatedAtDesc(user);&#10;    }&#10;&#10;    public PagedResponse&lt;EventResponseDto&gt; getMyCreatedEvents(UUID userId, Pageable pageable){&#10;        Users user = uRepo.findById(userId)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#10;        Page&lt;Events&gt; eventsPage = erepo.findByCreatedByOrderByCreatedAtDesc(user, pageable);&#10;        List&lt;EventResponseDto&gt; eventDtos = eventsPage.getContent().stream()&#10;                .map(EventMapper::toEventResponseDto)&#10;                .toList();&#10;        return PagedResponse.&lt;EventResponseDto&gt;builder()&#10;                .content(eventDtos)&#10;                .page(eventsPage.getNumber())&#10;                .size(eventsPage.getSize())&#10;                .totalElements(eventsPage.getTotalElements())&#10;                .totalPages(eventsPage.getTotalPages())&#10;                .first(eventsPage.isFirst())&#10;                .last(eventsPage.isLast())&#10;                .build();&#10;    }&#10;&#10;    public long getTotalEventsCount(){&#10;        return erepo.count();&#10;    }&#10;&#10;    public long getTotalActiveEventsCount(){&#10;        return erepo.countByStartDateAfter(LocalDateTime.now());&#10;    }&#10;&#10;    public long getEventsByCreatorCount(UUID creatorId){&#10;        Users user = uRepo.findById(creatorId)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + creatorId));&#10;        return erepo.countByCreatedBy(user);&#10;    }&#10;&#10;    public boolean isUserEventCreator(Long eventId, UUID userId){&#10;        Events event = erepo.findById(eventId).orElseThrow(() -&gt;&#10;                new IllegalArgumentException(&quot;Event not found with id: &quot; + eventId)&#10;        );&#10;        return event.getCreatedBy().getId().equals(userId);&#10;    }&#10;&#10;    public UUID getEventCreator(Long eventId){&#10;        Events event = erepo.findById(eventId).orElseThrow(() -&gt;&#10;                new IllegalArgumentException(&quot;Event not found with id: &quot; + eventId)&#10;        );&#10;        return event.getCreatedBy().getId();&#10;    }&#10;&#10;    @Transactional(readOnly = true)&#10;    public ViewRegistrationsDTO viewEventRegistrations(Long eventId, UUID userId) {&#10;        Events event = erepo.findById(eventId)&#10;                .orElseThrow(() -&gt; new EventNotFoundException(&quot;Event not found with id: &quot; + eventId));&#10;        return event.getCreatedBy().getId();&#10;    }&#10;&#10;    @Transactional(readOnly = true)&#10;    public ViewRegistrationsDTO viewEventRegistrations(Long id, UUID userId) {&#10;        Events event = erepo.findById(id).orElseThrow(() -&gt;&#10;                new IllegalArgumentException(&quot;Event not found with id: &quot; + id)&#10;        );&#10;&#10;        boolean isCreator = event.getCreatedBy().getId().equals(userId);&#10;        var eventRole = eventRoleRepo.findByUserIdAndEventId(userId, id);&#10;        boolean hasPrivilegedRole = false;&#10;        if(eventRole != null){&#10;            switch (eventRole.getRole()){&#10;                case CREATOR, ORGANIZER, MODERATOR, ADMIN -&gt; hasPrivilegedRole = true;&#10;                default -&gt; hasPrivilegedRole = false;&#10;            }&#10;        }&#10;&#10;        if(!(isCreator || hasPrivilegedRole)){&#10;            throw new AccessDeniedException(&quot;You are not allowed to view registrations for this event.&quot;);&#10;        }&#10;&#10;        Long registrationCount = repo.countByEventIdAndFormSubmittedTrue(id);&#10;&#10;        ViewRegistrationsDTO response = new ViewRegistrationsDTO();&#10;        response.setEventTitle(event.getTitle());&#10;        response.setRegistrationCount(registrationCount);&#10;&#10;        List&lt;Users&gt; registeredUsers = repo.findRegisteredUsersByEventIdAndFormSubmittedTrue(id);&#10;&#10;&#10;        List&lt;ViewRegistrationsDTO.RegistrationDetail&gt; registrationDetails = registeredUsers.stream()&#10;                .map(user -&gt; new ViewRegistrationsDTO.RegistrationDetail(&#10;                        user.getId(),&#10;                        user.getFullName(),&#10;                        user.getEmail(),&#10;                        user.getAvatar()&#10;                ))&#10;                .toList();&#10;&#10;        response.setRegistrations(registrationDetails);&#10;&#10;    public List&lt;Events&gt; getPopularEvents(int limit){&#10;        Pageable pageable = PageRequest.of(0, limit);&#10;        return erepo.findTopEventsByRegistrationCount(pageable);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>